IAM
- 1. 누가, 어떤 리소스가 서비스를 사용할 수 있는지 접근 레벨, 권한 관리 기능 제공
- 2. AWS 리소스는 지역에 따라 제공되는 서비스와 기능 다름, IAM 은 유니버셜 (생성 시 따로 지역 설명 X)

실시간 데이터 처리
- 1. 실시간 Data 처리
  = Pipeline 을 거쳐 Storage 에 저장된 것이 아닌 초당, 분당 실시간으로 전송되는 Data
  = 바깥 날씨에 대한 Data (온도, 풍향, 풍속 등) 를 AWS 에서 제공하는 IoT 리소스로 수집하는 것

- 2. Row Data
  = 실시간으로 들어오는 Data 는 매우 방대한 양이 쌓이며, 이렇게 쌓인 Data 를 가공되지 않은 Raw Data (로데이터)
  = 전처리 하기 위햐서는 많은 신경을 써야함
  = AWS IoT 를 통해 Data 를 읽은 후 Storage 에 바로 보관할지, 전처리를 거친 후 Storage 에 보관할지
    Data 를 읽는 과정에서 Data 의 모니터링 과정을 포함할지 말지에 대한 의사결정 진행

배치 데이터 관리
- 1. 초당, 분당 처리 X, Data 를 뭉텅이로 모아놓은 다음 한 번에 처리
- 2. 7일 동안 쌓인 Data 정리, 필요한 Data 만 가져와서 Data 분석 해야 함
- 3. 쌓인 Data 를 보관 시, RDB 나 AWS RDS 사용 고려 가능
- 4. Data 전처리
  = Lambda 거쳐 가공된 Data Storage 로 보관 가능

AWS 장점
1. 사용자 친화적
- 1. AWS Console, 개발자 아닌 Cloud 경험없는 사람들도 마우스 Click 몇 번, 간단한 Pipeline 을 안전 구축 가능
- 2. AWS 사용자는 특별한 제약 없이 언제 어디서나 쉽게 Pipeline 수정 가능
- 3. AWS 관련된 문서 및 정보는 Internet 에 넘쳐나고, 다양한 온라인 강의 제공되어 쉽게 접근 가능
- 4. GCP 나 Azure 와 달리 수 많은 회사에서 AWS 를 첫 Cloud Platform 으로 채택하여 사용, 사용자 친화적

2. 유연성과 편의성
- 1. AWS 원하는 OS, 프로그래밍 언어, WebApp 등 Pipeline 구축 시 필요한 요소 각자 입맛대로 골라 사용 가능
- 2. EC2, Instance 새로 만들 때, 우리가 원하는 OS, Application, 그 밖에 다양한 옵션 선택 가능

3. 뛰어난 보안
- 1. 외부 해킹 공격과 Data Privacy 를 지키기 위해 겹겹히 쌓여있는 Security Layer 가 Data 감시
- 2. AWS 보안팀이 철두철미하게 관리 중

4. 확장성
- 1. AWS 에는 Auto Scaling 이라 불리는 Service 존재
- 2. Instance 는 자동으로 VM 을 추가하여 기능 Upgrade, Instance Shutdown 문제 방지
- 3. Instance 능력보다 Data 가 터무니 없이 들어오면 Instance 기능 Downgrade