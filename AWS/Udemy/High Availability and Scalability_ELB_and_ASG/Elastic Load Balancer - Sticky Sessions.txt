Sticky Sessions (Session Affinity)
- 1. It's possible to implement stickiness
  = So that the same client is always redirected to the same instance behind a load balancer

- 2. Example
  = 1. Client 1, 2, 3 (Client -> ALB -> EC2 Instance)
    -> 1. Client 1 makes a request, it goes to 1st EC2 instance (even request goes to Load Balancer)
    -> 2. Client 2 and 3 request to the ALB, and takes to the 2nd EC2 instance

  = 2. ALB
  = 3. EC2 Instance 1, 2

- 3. This works for Classic Load Balancer, Application Load Balancer, and Network Load Balancer
- 4. The "cookie" used for stickiness has an expiration date you control
  = NLB works without cookies

- 5. Use case: make sure the user doesn't lose his session data
- 6. Enabling stickiness may bring imbalance to the load over the backend EC2 instances

Sticky Sessions - Cookie Names
- 1. Application-based Cookies
  = 1. Custom cookie
    -> 1. Generated by the target
    -> 2. Can include any custom attributes required by the application
    -> 3. Cookie name must be specified individually for each target group
    -> 4. Don't use AWSALB, AWSALBAPP, or AWSALBTG (reserved for use by the ELB)

  = 2. Application cookie
    -> 1. Generated by the load balancer
    -> 2. Cookie name is AWSALBAPP

- 2. Duration-based Cookies
  = 1. Cookie generated by the load balancer
  = 2. Cookie name is AWSALB for ALB, AWSELB for CLB

Sticky Session Target groups
- 1. Open Target groups page
- 2. Create new Target group for test, and then click the Edit Target group attributes
- 3. Target selection configuration
  = 1. Enable Stickiness
  = 2. Stickiness type
    -> 1. Check Application-based cookie in Stickiness type
    -> 2. App cookie name - MYCUSTOMAPPCOOKIE
   
  = 3. You don't need to check Application-based cookie

- 4. Click 'Save changes' button
- 5. Even you refresh the page several times, you get access to the same instance
  = But the cookie expires the day after you access to homepage first-time

